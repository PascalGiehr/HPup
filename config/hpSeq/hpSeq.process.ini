[Process]
process= hpSeqV1
fastqPattern= *q.gz

[hpSeqV1]
# count reads from fasta files
countReads= bash ${System:installFolder}/wrappers/hpSeq/countReads.sh -n {description} -i {{inputfile}} -o {{outputfile}}

# count reads from BAM files
countBAMReads= bash ${System:installFolder}/wrappers/hpSeq/countBAMReads.sh -n {description} -i {{inputfile}} -o {{outputfile}}

# count reads from output file
countOUTReads= bash ${System:installFolder}/wrappers/hpSeq/countOUTReads.sh -n {description} -i {{inputfile}} -o {{outputfile}}

#merge reads
mergeReads= cat {inputfile} > {outputfile}

#defining the process
joinReads= bash ${System:installFolder}/wrappers/hpSeq/preProcess.sh -L "${Analysis:linker}" -a {inputfile[0]} -b {inputfile[1]} -x {outputfile[0]} -y {outputfile[1]}

#clean up step of raw files
cleanup= > {outputfile[0]} 

#replace= ${Commands:java8} -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpReplaceSeq {inputfile} > {outputfile}

linkanalyze=${Commands:java8} -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpSeqBamAnalyze {inputfile[0]} {inputfile[1]} | sort -k1,1 -k2,2n > {outputfile[0]}

mergelink= bash ${System:installFolder}/wrappers/hpSeq/mergeLink.sh -i {inputfile} -o {outputfile}

#${syncReads_boolean}
#joinReads= bash preProcess.sh -L "${Analysis:linker}" -a {inputfile[0]} -b {inputfile[1]} -x {outputfile[0]} -y {outputfile[1]}
syncReads_boolean=false
syncReads_maxShift=12
syncReads_minLength=16
syncReads_maxError=7
syncReads= ${Commands:java8} -Xmx32G -jar ${System:jarFolder}/fastqUtils.jar hpSeqSync ${syncReads_boolean}  ${syncReads_maxShift} ${syncReads_minLength} ${syncReads_maxError} {inputfile[0]} {inputfile[1]}

#syncReads= hpSync.sh -Xmx4G ${System:jarFolder}/fastqUtils.jar hpSeqSync ${syncReads_maxShift} ${syncReads_minLength} ${syncReads_maxError} {inputfile[0]} {inputfile[1]}

#map R1 synchronized fastq files with reference library to output bam files
mapReads= ${Commands:mapWithGem} -a {inputfile} -o {outputfile} -r ${Analysis:genome_reference_gem}

#map wobble position with mapped reads
wobblemapRead= bash ${System:installFolder}/wrappers/hpSeq/wobblemapRead.sh -i {inputfile[0]} -j {inputfile[1]} -o {outputfile[0]}

#replace sequence with sequence including methylation information (problems with bam format)
replace= bash ${System:installFolder}/wrappers/hpSeq/replaceSeqmarkDup.sh -i {inputfile[0]} -j {inputfile[1]} -o {outputfile[0]}

#analyze statistics of duplicats
markduplicates= bash ${System:installFolder}/wrappers/hpSeq/markduplicates.sh  -i {inputfile} -o {outputfile} 


#mapReads= mapWithGem.sh -a {inputfile} -o {outputfile} -r ${Analysis:genome_reference_gem}

pileup= ${Commands:java8} -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpSeqPileup {inputfile} | sort -k1,1 -k2,2n > {outputfile}

pileup2= ${Commands:java8} -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpSeqPileup2 {inputfile} | sort -k1,1 -k2,2n > {outputfile}

#pileup= pileup.sh -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpSeqPileup {inputfile[1]} {inputfile[0]} > {outputfile}

# the mergeCall command is cheating... but it will have to do for now
mergeCall= sort -m -k1,1 -k2,2n {inputfolder}/seq_????_pileup.txt |mawk -f ${System:installFolder}/wrappers/hpSeq/mergeCall.awk | ${Commands:java8} -cp .:${System:jarFolder}/htsjdk-1.130.jar:${System:jarFolder}/bamUtils.jar tools.bam.bamUtils hpSeqPileupCall - |${Commands:bgzip} -c  > {{outputfile}}

#call tabix for igv browser
tabixCall= ${Commands:tabix} -s1 -b2 -e2 -f {inputfile} > {outputfile}


# generate file with sequence identifier and sequence of wobble position
# calculate the bisulfite conversion rate of the hairpin linker

conversionHAIRPIN= bash ${System:installFolder}/wrappers/hpSeq/conversionHAIRPIN.sh  -i {inputfile[0]} -y {outputfile[0]} -x {outputfile[1]} -c ${Analysis:output}/config.ini -I ${Analysis:installFolder}

# generate wobble position

wobbleHAIRPIN=bash ${System:installFolder}/wrappers/hpSeq/wobbleHairpin.sh -i {inputfile} -o {outputfile}

#pad spikes
padReferenceSpikes_paddingSize=100
padReferenceSpikes= ${Commands:java8} -jar ${System:jarFolder}/fastaUtils.jar pad {inputfile} ${padReferenceSpikes_paddingSize} > {outputfile}

createReferenceSpikes= ${Commands:gmap_build} -D {spikeReferenceFolder} -d repeats {{inputfile}} && ${Commands:cmetindex} -F {spikeReferenceFolder} -d repeats &> {{outputfile}}

filterSpikes= ${Commands:gsnap} --nthreads=8 --npaths=1 --db=repeats --dir={spikeReferenceFolder} --sam-use-0M  --format=sam --gunzip --mode=cmet-stranded {{inputfile}} |${Commands:samtools} view -u -F 260 - | ${Commands:samtools} sort -T - > {{outputfile}}

forwardmergeSpikes= ${Commands:samtools} merge -u - {{inputfile}}| ${Commands:samtools} view -F16 -u - | ${Commands:samtools} mpileup -f {paddedReference} - > {{outputfile}}

reversemergeSpikes= ${Commands:samtools} merge -u - {{inputfile}}| ${Commands:samtools} view -f16 -u - | ${Commands:samtools} mpileup -f {paddedReference} - > {{outputfile}}

finalSpikes= bash ${System:installFolder}/wrappers/hpSeq/finalSpikes.sh -a {inputfile[0]} -b {inputfile[1]} -o {outputfile[0]} -c ${Analysis:output}/config.ini -I ${Analysis:installFolder}
